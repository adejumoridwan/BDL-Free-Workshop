---
title: "Data Analytics With R"
author: "Business Data Laboratory"
format: 
  revealjs:
    theme: [moon, custom-style.scss]
    preview-links: true
    chalkboard: 
      boardmarker-width: 5
from: markdown+emoji
execute:
  echo: true
editor: visual
title-slide-attributes: 
  data-background-image: images/bdl_full_logo.jpeg
  data-background-size: 10%
  data-background-position: 2% 2%
---

## Agenda

::: incremental
-   Intro :wave:

-   Today's Take-away :clipboard:

-   Q/A

-   Thank you
:::

## Today's Take-away

<br/>

::: incremental
1.  Why a Career as a Data Analyst?
2.  Why R?
3.  Why learn from Us?
4.  Our Instructors
:::

# Why a Career as a Data Analyst?

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

------------------------------------------------------------------------

## What does a Data Analyst do?

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

<br> <br>

::: {style="text-align: center"}
-   Source and gather data,
-   Clean and organize it
-   Use data to reach meaningful conclusions
-   Communicate results through visuals and reports
:::

------------------------------------------------------------------------

## Why a career now, as a data analyst?

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

<br> <br>

-   Salaries range from 168,000 NGN to 481,000 NGN or more for experienced Data Analysts
-   Remote/Hybrid work option
-   Freelancing
-   Start your own consulting

<br>

# Why learn from Business Data Laboratory?

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

------------------------------------------------------------------------

## Our Classes - In-person

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

::: columns
::: {.column width="50%"}
![](images/trainings/pics1.jpeg){.absolute top="70" right="530" height="574" width="499"}
:::

::: {.column width="50%"}
::: fragment
::: {style="font-size: 0.45em"}
![](images/trainings/pics2.jpeg){.absolute top="70" left="530" height="574" width="499"}
:::
:::
:::
:::

------------------------------------------------------------------------

## Our Classes - Virtual

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

<br><br>

-   Zoom meetings
-   Shared document management
-   Recorded classes
-   Email/Chat messenger
-   Weekly/Weekend Online classes

## Our Curriculum

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

<br> <br>

-   Skill-tailored curriculum
-   Dedicated and supportive Instructors
-   Flexible schedule
-   Virtual classes
-   Portfolio-ready projects

<br>

## Our Instructors

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

::: {.column width="30%"}
::: fragment
![](images/profile-pix.png){.absolute top="70" left="530" height="574" width="499"}
:::
:::

::: columns
::: {.column width="70%"}
Bilikisu Wunmi Olatunji
:::

::: fragment
<br/> MSc (Information Technology)
:::

::: fragment
<br/> Data Scientist/RShiny Developer
:::

::: fragment
<br/> Certified RStudio Instructor, [**Tidyverse+RShiny**]{style="color:#c5488c"}
:::

::: fragment
<br/> Certified [**Scrum Master/Product Owner/Agile Coach**]{style="color:#c5488c"}
:::
:::

## Our Instructors

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

::: {.column width="30%"}
::: fragment
![](images/robinson.jpg){.absolute top="70" left="530" height="574" width="499"}
:::
:::

::: columns
::: {.column width="70%"}
Amanyiraho Robinson, Uganda
:::

::: fragment
<br/> BSc (Statistics)
:::

::: fragment
<br/> Data Scientist/RShiny Developer
:::

::: fragment
<br/> Certified RStudio Instructor, [**Tidyverse**]{style="color:#c5488c"}
:::
:::

## Our Instructors

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

::: {.column width="30%"}
::: fragment
![](images/ridwan.jpeg){.absolute top="70" left="530" height="574" width="499"}
:::
:::

::: columns
::: {.column width="70%"}
Adejumo Ridwan Suleiman
:::

::: fragment
<br/> BSc (Statistics)
:::

::: fragment
<br/> Data Scientist/RShiny Developer
:::

::: fragment
<br/> Udemy Instructor
:::
:::

## Our Instructors

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

::: {.column width="30%"}
::: fragment
![](images/faheedah.jpg){.absolute top="70" left="530" height="574" width="499"}
:::
:::

::: columns
::: {.column width="70%"}
Faheedah Bukola Bello
:::

::: fragment
<br/> BSc(Statistics)
:::

::: fragment
<br/> Data Scientist/RShiny Developer
:::

::: fragment
<br/> Certified Scrum Master
:::
:::

# 

::: {.absolute top="0" left="100%"}
::: sectionhead
[1 2]{style="opacity:0.25"} 3 [4 5 6]{style="opacity:0.25"}
:::
:::

# Introduction to R

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

------------------------------------------------------------------------

## What is R?

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

<br> <br>

::: {style="text-align: center"}
-   R is a programming language and software environment for statistical computing and graphics.
-   It's used in the field of data science for data analysis, visualization, and statistical modeling.
:::

------------------------------------------------------------------------

## Why R?

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

<br>

R is [**open-source**]{style="color:#c5488c"} and has a large community of users who contribute to its development and support with online resources. <br>

. . .

It offers a variety of [**packages**]{style="color:#c5488c"} for data manipulation, machine learning, and visualization. <br>

. . .

It is widely used in [**academia and industry**]{style="color:#c5488c"}, making it a valuable skill for professionals in various fields. <br>

. . .

R is highly [**flexible**]{style="color:#c5488c"} and allows users to create [**custom functions and scripts**]{style="color:#c5488c"}, making it suitable for a wide range of data analysis tasks. <br>

. . .

------------------------------------------------------------------------

## Installing R and RStudio

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

<br/> <br/> <br/>

Download and install R \[**FIRST**\] [R language](https://cloud.r-project.org/) <br/> <br/>

. . .

Next, download and install [RStudio IDE](https://www.rstudio.com/products/rstudio/download/)

------------------------------------------------------------------------

## Difference between R and RStudio IDE

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

::: columns
::: {.column width="50%"}
![](images/r-console.png){.absolute top="70" right="530" height="574" width="499"}
:::

::: {.column width="50%"}
::: fragment
::: {style="font-size: 0.45em"}
![](images/rstudio-ide-2.png){.absolute top="70" left="530" height="574" width="499"}
:::
:::
:::
:::

## Getting to know RStudio IDE

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

::: {.absolute top="10%" left="0" width="1031" height="529"}
::: {style="text-align: center"}
![](images/rsudio-ide-1.png)
:::
:::

::: {.absolute top="66%" left="55%"}
::: {style="color: #c5488c"}
codes are displayed, executed here but not stored
:::
:::

. . .

::: {.absolute top="28%" left="70%"}
::: {style="color: #c5488c"}
environment data are displayed up here
:::
:::

. . .

::: {.absolute top="50%" left="10%"}
::: {style="color: #c5488c"}
project files displayed here
:::
:::

------------------------------------------------------------------------

## Getting to know RStudio IDE

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

::: {.absolute top="10%" left="0" width="1031" height="529"}
::: {style="text-align: center"}
![](images/rstudio-ide-2.png)
:::
:::

::: {.absolute top="66%" left="55%"}
::: {style="color: #c5488c"}
codes are here
:::
:::

::: {.absolute top="28%" left="70%"}
::: {style="color: #c5488c"}
environment data are displayed up here
:::
:::

::: {.absolute top="35%" left="25%"}
::: {style="color: #c5488c"}
code can also<br>go here
:::
:::

------------------------------------------------------------------------

## File and Project Structure in RStudio IDE

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

::: columns
::: {.column width="50%"}
-   Root - Project Directory
-   Data - Data Directory
-   R(optional) - Custom functions
-   Rmd - Reports Directory
-   scripts - Scripts directory
-   Output - plots and tables directory
:::

::: {.column width="50%"}
::: fragment
::: {style="font-size: 0.45em"}
![](images/file-project-structure.png){.absolute top="70" left="530" height="574" width="499"}
:::
:::
:::
:::

------------------------------------------------------------------------

## Creating R Project

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

::: columns
![](images/new-project.png){.absolute top="70" height="574" width="100%"}
:::

------------------------------------------------------------------------

## Getting help

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   [R/RStudio help]()
-   [RStudio Community](https://community.rstudio.com/latest)
-   [Search engines](www.google.com)
-   [Stackoverflow](https://stackoverflow.com/)

------------------------------------------------------------------------

## R Variables

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Variables as containers for storing values of data.\
-   Variables are created using the assignment operator `<-` *or* `=`.

Example

```{r}
country <- "Nigeria"
age = 62
```

-   Text values are surrounded by double or single quotes while numeric are not surrounded by quotes.

------------------------------------------------------------------------

## R Variables

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Values in variable are accessed using the name of the variable.

```{r}
country
age
```

-   You can also print variables with the print function in R.\

```{r}
print(country)
print(age)
```

------------------------------------------------------------------------

## R Variables

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can assign multiple variables in R.\

```{r}
State <- Capital <- "Kano"
State
Capital
```

-   The `c()` also known as the combine function lets you assign two or more values to a variable in R.\

```{r}
vowel_sounds <- c("a","e","i","o","u")
prime_numbers <- c(1,3,5,11)
```

------------------------------------------------------------------------

## Variable Naming

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

Variable names should :

-   be meaningful and descriptive of the value assigned to it

. . .

-   start with characters`(a-z)`, a combination of characters`(a-z)`, underscores`(_)`,digits and periods`(.)`

. . .

-   not start with digits or underscores`(_)`

. . .

-   not start with a period followed by a digit\`(.4)

. . .

-   not be Special words in R such as `(TRUE, FALSE,                  NULL,if,else,while,for)`, etc

------------------------------------------------------------------------

## Variable Naming

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

Variables in R are case sensitive i.e `Age` and `age` are not the same variable.

Valid Variable Names

```{r}
firstcountry = "Nigeria"
second_country = "Congo"
thirdCountry = "Sudan"
FOURTHCOUNTRY = "Somalia"
country5 = "South Africa"
country.6 = "Algeria"
.country7 = "Kenya"
```

------------------------------------------------------------------------

## Variable Naming

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

Invalid Variable Names

```{r}

#8variable <- "Morocco"
#variable-9 <- "Tunisia"
#variable 10 <- "Egypt"
#_variable_11 <- "Rwanda"
#variable@12 <- "Madagascar"
#FALSE <- "Ghana"
```

------------------------------------------------------------------------

## Comments

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Comments are used in explaining blocks of code
-   They are usually lines ignored anytime an R script is executed and begins with a `#`

```{r}
#This is a comment
'This is not a comment'
```

------------------------------------------------------------------------

## Arithmetic and Logical Operations in R

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   addition`(+)`\
-   subtraction `(-)`\
-   multiplication`(*)`\
-   division`(/)`\
-   exponent`(^)`\
-   Integer division`(%/%)`\
-   Remainder division`(%%)`

------------------------------------------------------------------------

## Arithmetic and Logical Operations in R

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

Examples:

```{r}
4 + 5

a = 8
b = 9

z = a + b

y <- x <- z

u = (a + b)*(y/x) + z^5 - 10000

u

```

------------------------------------------------------------------------

## Other Operators

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

[**Comparison Operators**]{style="color:#c5488c"} - `(==)`, `(!=)`, `(>)`, `(<)`, `(<=)`, `(>=)`

[**Logical Operators**]{style="color:#c5488c"} - `(&)`, `(|)`, `(!)`

------------------------------------------------------------------------

## Data Types

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

5 major data types:

-   numeric
-   integer
-   complex
-   character
-   logical

------------------------------------------------------------------------

## Data Types

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

In this workshop, we will treat just numeric, integer, character and logical.

numeric

```{r}
a = 45
b = 4.3
a
b
```

integer

```{r}

c = 3L
d = 56L
e = 45.5L #not an integer and will return error because it contains decimal 
```

------------------------------------------------------------------------

## Data Types

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

character

```{r}
name = "Joy"
sex = "Male"
```

logical`(TRUE or FALSE)`

```{r}
x = TRUE
y = (5<1)
```

------------------------------------------------------------------------

## Data Types

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   data type of a variable can be checked using the `class()` function

```{r}
class(a)
class(c)
class(x)
class(y)
```

------------------------------------------------------------------------

## Data Structures

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   a collection of data types, which can be similar or different from each other.\
-   A data is divided into 6 major types;\
    Vectors\
    Lists\
    Matrices\
    Arrays\
    Data Frames\
    Factors

------------------------------------------------------------------------

## Vectors

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   contain items or values of the same data type.\
-   values are usually combined with the `c()` function separated by `,`.\

```{r}
#vector of character values
colours <- c("blue","green","yellow","black","white")
colours
#vector of numeric values
prime_number <- c(1,3,5,7,11,13)
prime_number
#vector of logical values
logical <- c(TRUE, FALSE)
logical
```

------------------------------------------------------------------------

## Vectors

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can check for the length of vector using the `length()` function.

```{r}
names <- c("Joy","John","Jamal")
length(names)
```

-   You can sort a vector with the `sort()` function.

```{r}
numbers <- c(14,3,5,6,1,0,13,10,9)
sort(numbers)
```

------------------------------------------------------------------------

## Vectors

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   access an item in a vector by its index number

```{r}
fruits <- c("Bananana", "Orange","Water Melon","PawPaw")
#Access single elements
fruits[2]
#Using negative numbers for index to access all items except the one specified
fruits[-1]
```

-   access multiple elements

```{r}
#Access multiple elements
fruits[c(2,3)]
```

------------------------------------------------------------------------

## Lists

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   contain many different data types

-   created using the `list()` function.

```{r}
#create a list of different data type
my_list <- list("Kano", "Gombe","Bauchi", TRUE,8,20)
#accessing the items in a list
my_list[3]
my_list[1]
```

------------------------------------------------------------------------

## Lists

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can change the value of an item in a list

```{r}
#Changing the value of an item in a list
my_list[4] <- "girl"
```

-   You can remove list items by using negative indexing

```{r}
another_list <- my_list[-1]
```

------------------------------------------------------------------------

## Lists

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can add an item to the end of alist with the `append()` function

```{r}
append(my_list, "horse")
```

------------------------------------------------------------------------

## Matrices

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   two dimensional data made up of columns and rows
-   created with the `matrix()` function

```{r}
#create a simple 2x2 matrix of numbers
a_matrix <- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
```

-   A matrix of strings can also be created

```{r}
string_matrix <- matrix(c("blue","white","red","green"), nrow = 2, ncol = 2)
```

------------------------------------------------------------------------

## Matrices

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

```{r}
a_matrix

string_matrix
```

------------------------------------------------------------------------

## Matrices

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   access matrix items with square brackets

```{r}
prime <- matrix(c(2,3,5,7,11,13,17,19,23),ncol = 3)
#access row 2 column 1
prime[2,1]
#access only column 3
prime[,3]
#access only row 2
prime[2,]
#access more than 1 row
prime[c(2,3),]
```

------------------------------------------------------------------------

## Matrices

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   add rows and columns to a matrix with the `rbind()` and `cbind()` function respecively.

```{r}
#add rows
newMatrix <- rbind(prime, c(29,31,37))
newMatrix
#add columns
newMatrix <- cbind(prime, c(29,31,37))
```

------------------------------------------------------------------------

## Matrices

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can check for the number of rows and columns with the `dim()` function

```{r}
dim(a_matrix)
```

------------------------------------------------------------------------

## Arrays

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Unlike matrices, Arrays have more than two dimensions.
-   The `array()` function is used to create an array.

```{r}
a_vector <- c(1:30)
an_array <- array(a_vector, dim = c(5,2,3))
```

------------------------------------------------------------------------

## Arrays

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

```{r}
an_array
```

------------------------------------------------------------------------

## Arrays

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Array items can also be accessed by indexing with the squaed brackets

```{r}
an_array[5,2,2]
```

-   Dimension of an array can also be checked with the `dim()` function

```{r}
dim(an_array)
```

------------------------------------------------------------------------

## Data Frames

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   data displayed in tabular format
-   consists of columns of different data types, but each column contain values of the same data types.
-   created with the `data.frame()` function.

```{r}
workers <- data.frame(
  name = c("Joy","John","Rebecca"),
  age = c(43,21,45),
  married = c(TRUE,FALSE, FALSE)
)
workers
```

------------------------------------------------------------------------

## Data Frames

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can summarize a data frame using the `summary()` function

```{r}
summary(workers)
```

------------------------------------------------------------------------

## Data Frames

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Items in a dataframe can be assigned with square brackets `[]`,double brackets`[[]]` or dollar signs`$`.

```{r}
workers[2]
workers[["married"]]
workers$name
workers
```

------------------------------------------------------------------------

## Data Frames

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can add new rows and columns to the data using the `rbind()` and `cbind()` functions respectively.

```{r}
#add another worker
new_workers_data <- rbind(workers, c("Johnson",49,FALSE))
new_workers_data
#add another variable
new_workers_var <- cbind(workers, Children = c(5,1,8))
new_workers_var
```

------------------------------------------------------------------------

## Data Frames

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Rows can be removed with negative indexing

```{r}
new_workers_var[-3,-2]
```

------------------------------------------------------------------------

## Data Frames

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can combine two data frames with the `cbind()` function

```{r}
# combine by row
cbind(new_workers_data, new_workers_data)
```

------------------------------------------------------------------------

## Data Frames

::: {.absolute top="0" left="100%"}
::: sectionhead
1 [2 3 4 5 6]{style="opacity:0.25"}
:::
:::

```{r}
#combine by columns
rbind(new_workers_data, new_workers_data)
```

------------------------------------------------------------------------

# Data Analysis and Visualization

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

------------------------------------------------------------------------

## Importing and Exporting Data

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Before a data can be used in R, it needs to be imported and saved as a variable.
-   A data is imported using the `read.csv()` function.
-   The data will be working with is the sales data

```{r}
sales <- read.csv("sales.csv")
```

------------------------------------------------------------------------

## Importing and Exporting Data

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   The `read.csv()` takes the file path of the data as an argument.
-   Data can also be exported using the `write.csv()` function.
-   let's subset some columns in the data and export.

```{r}
subset <- sales[,c(2,3,4)]
write.csv(subset, "subset.csv")
```

## Analyzing Data

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can get a view of the whole data on a new tab using the `View()` function or use the`head()` function to get the first 5 rows.

```{r}
knitr::kable(head(sales, 3))
#View(sales)
```

-   You can check the data types of your data using the `str()` function.

```{r}
str(sales)
```

## Analyzing Data

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   You can check for the descriptive statistics using the `summary()` function

```{r}
summary(sales)
```

## Analyzing Data

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Let's find out the total amount of all sales made.

```{r}
sum(sales["total"])
```

-   Total payment by cash

```{r}
sum(sales[sales$payment == "Cash",]["total"])
```

-   Most expensive item by unit price

```{r}
sales[sales$unit_price == 66.62,]
```

## Analyzing Data

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Total sales made in each warehouse

```{r}
#Central
sum(sales[sales["warehouse"] == "Central",]["total"])
#North
sum(sales[sales["warehouse"] == "North",]["total"])
#West
sum(sales[sales["warehouse"] == "West",]["total"])
```

## Visualization

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Data visualization are performed in R using the ggplot2 package.
-   Let's find the frequency of sales made by warehouse.

```{r}
library(ggplot2)
ggplot(data = sales, mapping = aes(x = warehouse,y = total,
                                   fill = warehouse)) +
  geom_col()
```

## Visualization

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Let's also find the total sales made by each client from the various warehouses.

```{r}
ggplot(data = sales, 
       mapping = aes(x = client_type,y = total,fill = client_type)) +
  geom_col()
```

## Visualization

::: {.absolute top="0" left="100%"}
::: sectionhead
[1]{style="opacity:0.25"} 2 [3 4 5 6]{style="opacity:0.25"}
:::
:::

-   Let's also see the payment system with the highest transactions.

```{r}
ggplot(data = sales, 
       mapping = aes(x = payment,y = total,fill = payment)) +
  geom_col()
```

------------------------------------------------------------------------

# Q/A

::: {.absolute top="0" left="100%"}
::: sectionhead
[1 2]{style="opacity:0.25"} 3 [4 5 6]{style="opacity:0.25"}
:::
:::

------------------------------------------------------------------------

# Thank You

::: {.absolute top="0" left="100%"}
::: sectionhead
[1 2 3]{style="opacity:0.25"} 4 [5 6]{style="opacity:0.25"}
:::
:::
